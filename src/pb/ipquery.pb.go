// Code generated by protoc-gen-go.
// source: ipquery.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	ipquery.proto

It has these top-level messages:
	FindParams
	FindResult
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FindParams struct {
	Ip string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
}

func (m *FindParams) Reset()                    { *m = FindParams{} }
func (m *FindParams) String() string            { return proto.CompactTextString(m) }
func (*FindParams) ProtoMessage()               {}
func (*FindParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FindParams) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type FindResult struct {
	Data []string `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (m *FindResult) Reset()                    { *m = FindResult{} }
func (m *FindResult) String() string            { return proto.CompactTextString(m) }
func (*FindResult) ProtoMessage()               {}
func (*FindResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FindResult) GetData() []string {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*FindParams)(nil), "pb.FindParams")
	proto.RegisterType((*FindResult)(nil), "pb.FindResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for IpQuery service

type IpQueryClient interface {
	// find out ip query result
	Find(ctx context.Context, in *FindParams, opts ...grpc.CallOption) (*FindResult, error)
}

type ipQueryClient struct {
	cc *grpc.ClientConn
}

func NewIpQueryClient(cc *grpc.ClientConn) IpQueryClient {
	return &ipQueryClient{cc}
}

func (c *ipQueryClient) Find(ctx context.Context, in *FindParams, opts ...grpc.CallOption) (*FindResult, error) {
	out := new(FindResult)
	err := grpc.Invoke(ctx, "/pb.IpQuery/Find", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IpQuery service

type IpQueryServer interface {
	// find out ip query result
	Find(context.Context, *FindParams) (*FindResult, error)
}

func RegisterIpQueryServer(s *grpc.Server, srv IpQueryServer) {
	s.RegisterService(&_IpQuery_serviceDesc, srv)
}

func _IpQuery_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpQueryServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.IpQuery/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpQueryServer).Find(ctx, req.(*FindParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _IpQuery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.IpQuery",
	HandlerType: (*IpQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Find",
			Handler:    _IpQuery_Find_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipquery.proto",
}

func init() { proto.RegisterFile("ipquery.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 166 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0x2c, 0x28, 0x2c,
	0x4d, 0x2d, 0xaa, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x92, 0xe1,
	0xe2, 0x72, 0xcb, 0xcc, 0x4b, 0x09, 0x48, 0x2c, 0x4a, 0xcc, 0x2d, 0x16, 0xe2, 0xe3, 0x62, 0xca,
	0x2c, 0x90, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x62, 0xca, 0x2c, 0x50, 0x52, 0x80, 0xc8, 0x06,
	0xa5, 0x16, 0x97, 0xe6, 0x94, 0x08, 0x09, 0x71, 0xb1, 0xa4, 0x24, 0x96, 0x24, 0x4a, 0x30, 0x2a,
	0x30, 0x6b, 0x70, 0x06, 0x81, 0xd9, 0x46, 0xc6, 0x5c, 0xec, 0x9e, 0x05, 0x81, 0x20, 0x43, 0x85,
	0x34, 0xb8, 0x58, 0x40, 0x8a, 0x85, 0xf8, 0xf4, 0x0a, 0x92, 0xf4, 0x10, 0x86, 0x4a, 0xc1, 0xf9,
	0x10, 0x63, 0x94, 0x18, 0x9c, 0x34, 0xb8, 0xc4, 0xf2, 0x52, 0x4b, 0xf4, 0x4a, 0x12, 0x93, 0x12,
	0x73, 0x4a, 0xf4, 0xa0, 0x8e, 0x4a, 0xd1, 0x2b, 0x48, 0x72, 0xe2, 0x81, 0x1a, 0x16, 0x00, 0x72,
	0x60, 0x00, 0x63, 0x12, 0x1b, 0xd8, 0xa5, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8f, 0xf9,
	0x04, 0x02, 0xba, 0x00, 0x00, 0x00,
}
